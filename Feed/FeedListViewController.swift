//
//  FeedListViewController.swift
//  Feed
//
//  Created by Antonov Vladislav on 20/11/2019.
//  Copyright (c) 2019 Antonov Vladislav. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FeedListDisplayLogic: CommonDisplayLogic {
	func displaySomething(viewModel: FeedList.Something.ViewModel)
	func displayBook(url: URL)
}

final class FeedListViewController: UIViewController, FeedListDisplayLogic {
	
	var interactor: FeedListBusinessLogic?
	var router: (FeedListRoutingLogic & FeedListDataPassing)?
	
	private var displayedItems: [TableViewCellAnyModel] = []
	
	private lazy var tableView: UITableView = {
		let table = UITableView(frame: .zero)
		table.translatesAutoresizingMaskIntoConstraints = false
		table.rowHeight = UITableView.automaticDimension
		table.estimatedRowHeight = 100
		table.dataSource = self
		table.delegate = self
		table.separatorStyle = .none
		table.register(cells: [FeedListItemCell.self])
		return table
	}()
	
	// MARK: Object lifecycle
  
	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		setup()
	}

	// MARK: Setup
  
	private func setup() {
		let presenter = FeedListPresenter()
		let interactor = FeedListInteractor(presenter: presenter)
		let router = FeedListRouter()
		self.interactor = interactor
		self.router = router
		router.viewController = self
		router.dataStore = interactor
		presenter.viewController = self
	}

	// MARK: View lifecycle

	override func viewDidLoad() {
		super.viewDidLoad()
		prepareUI()
		doSomething()
	}

	func doSomething() {
		let request = FeedList.Something.Request()
		interactor?.doSomething(request: request)
	}

  	// MARK: - Display Logic
	func displaySomething(viewModel: FeedList.Something.ViewModel) {
		DispatchQueue.main.async { [weak self] in
			self?.displayedItems = viewModel.viewModels
			self?.tableView.reloadData()
		}
	}

	func displayBook(url: URL) {
		router?.openBookDetails(url: url)
	}
}

// MARK: - UITableViewDataSource
extension FeedListViewController: UITableViewDataSource {
	func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
		return displayedItems.count
	}
	
	func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
		return tableView.dequeueReusableCell(withModel: displayedItems[indexPath.row], for: indexPath)
	}
}

// MARK: - UITableViewDelegate
extension FeedListViewController: UITableViewDelegate {
	func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
		tableView.deselectRow(at: indexPath, animated: true)
		displayedItems[indexPath.row].action?()
	}
}

private extension FeedListViewController {
	func prepareUI() {
		view.addSubview(tableView)
		NSLayoutConstraint.activate([tableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
									 tableView.leftAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leftAnchor),
									 tableView.rightAnchor.constraint(equalTo: view.safeAreaLayoutGuide.rightAnchor),
									 tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor)])
	}
}
