//
//  FeedListInteractor.swift
//  Feed
//
//  Created by Antonov Vladislav on 20/11/2019.
//  Copyright (c) 2019 Antonov Vladislav. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

protocol FeedListBusinessLogic {
	func doSomething(request: FeedList.Something.Request)
}

protocol FeedListDataStore {
	var feedList: [FeedResponse] { get set }
}

final class FeedListInteractor: FeedListBusinessLogic, FeedListDataStore {
	init(presenter: FeedListPresentationLogic) {
		self.presenter = presenter
	}
	let presenter: FeedListPresentationLogic
	var feedList: [FeedResponse] = []
	private let service: FeedService = FeedNetworkService()

	// MARK: - FeedListBusinessLogic
	func doSomething(request: FeedList.Something.Request) {
		service.getFeed { [weak self] (result) in
			guard let self = self else {
				return
			}
			switch result {
			case .success(let response):
				let responseDTO = FeedList.Something.Response(items: response.items)
				self.presenter.presentFeedList(response: responseDTO)
			case .failure(let error):
				self.presenter.present(error: error)
			}
		}
	}
}
